   1               		.file	"audio.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  72               		.section	.text.sample_morse,"ax",@progbits
  74               	.global	sample_morse
  76               	sample_morse:
   1:audio.c       **** #include <avr/io.h>
   2:audio.c       **** #include <avr/interrupt.h>
   3:audio.c       **** 
   4:audio.c       **** #include "audio.h"
   5:audio.c       **** #include "dac.h"
   6:audio.c       **** #include "sine.h"
   7:audio.c       **** 
   8:audio.c       **** typedef void (*int_routine)(void);
   9:audio.c       **** 
  10:audio.c       **** volatile int_routine next_sample; /* pointer to proper next sample method */
  11:audio.c       **** 
  12:audio.c       **** uint8_t sample_clock;     /* configuration for sample clock prescaler */
  13:audio.c       **** uint16_t dit_length;      /* number of sample clock cycles for one dit */
  14:audio.c       **** 
  15:audio.c       **** /* interrupt which sets output to morse space */
  16:audio.c       **** void inline output_space(void);
  17:audio.c       **** 
  18:audio.c       **** ISR(TIMER1_COMPA_vect)
  19:audio.c       **** {
  20:audio.c       ****     output_space();
  21:audio.c       **** }
  22:audio.c       **** 
  23:audio.c       **** /* interrupt which loads new sample */
  24:audio.c       **** ISR(TIMER1_OVF_vect)
  25:audio.c       **** {
  26:audio.c       ****     next_sample();
  27:audio.c       **** }
  28:audio.c       **** 
  29:audio.c       **** /* audio buffer and it's pointers */
  30:audio.c       **** volatile uint8_t buffer_data[AUDIO_BUFFER_SIZE];
  31:audio.c       **** volatile struct _buffer_pointers {
  32:audio.c       ****     uint8_t first:4; /* points at the first valid item */
  33:audio.c       ****     uint8_t empty:4; /* points at the first available space */
  34:audio.c       **** } buffer;
  35:audio.c       **** 
  36:audio.c       **** 
  37:audio.c       **** /* outputs next wav sample and moves buffer pointer */
  38:audio.c       **** void sample_wav(void)
  39:audio.c       **** {
  40:audio.c       ****     if (buffer.first == buffer.empty) return;
  41:audio.c       ****     dac_begin();
  42:audio.c       ****     dac_output(buffer_data[buffer.first]);
  43:audio.c       ****     dac_end();
  44:audio.c       ****     buffer.first = (buffer.first + 1) % AUDIO_BUFFER_SIZE;
  45:audio.c       **** }
  46:audio.c       **** 
  47:audio.c       **** /* configure next dit/dah and space to sampling timer
  48:audio.c       ****    and when at the end of character move buffer pointer to next char */
  49:audio.c       **** void sample_morse(void)
  50:audio.c       **** {
  78               	.LM0:
  79               	.LFBB1:
  80               	/* prologue: function */
  81               	/* frame size = 0 */
  82               	/* stack size = 0 */
  83               	.L__stack_usage = 0
  51:audio.c       ****     if (buffer.first == buffer.empty) return;
  85               	.LM1:
  86 0000 9091 0000 		lds r25,buffer
  87 0004 9F70      		andi r25,lo8(15)
  88 0006 8091 0000 		lds r24,buffer
  89 000a 8295      		swap r24
  90 000c 8F70      		andi r24,lo8(15)
  91 000e 9817      		cp r25,r24
  92 0010 01F4      		brne .+2
  93 0012 00C0      		rjmp .L1
  52:audio.c       **** 
  53:audio.c       ****     uint8_t bitmask_id = (buffer.first + 1) % AUDIO_BUFFER_SIZE;
  95               	.LM2:
  96 0014 8091 0000 		lds r24,buffer
  54:audio.c       **** 
  55:audio.c       ****     struct { /* structure to save lengths of symbol and following space */
  56:audio.c       ****         uint8_t symbol:4;
  57:audio.c       ****         uint8_t space:4;
  58:audio.c       ****     } l;
  59:audio.c       **** 
  60:audio.c       ****     buffer_data[buffer.first]--;
  98               	.LM3:
  99 0018 E091 0000 		lds r30,buffer
 100 001c EF70      		andi r30,lo8(15)
 101 001e F0E0      		ldi r31,lo8(0)
 102 0020 E050      		subi r30,lo8(-(buffer_data))
 103 0022 F040      		sbci r31,hi8(-(buffer_data))
 104 0024 9081      		ld r25,Z
 105 0026 9150      		subi r25,lo8(-(-1))
 106 0028 9083      		st Z,r25
  53:audio.c       ****     uint8_t bitmask_id = (buffer.first + 1) % AUDIO_BUFFER_SIZE;
 108               	.LM4:
 109 002a 8F5F      		subi r24,lo8(-(1))
  61:audio.c       **** 
  62:audio.c       ****     if (buffer_data[bitmask_id] & 0x1) l.symbol = 3; /* DAH */
 111               	.LM5:
 112 002c 8F70      		andi r24,lo8(15)
 113 002e E82F      		mov r30,r24
 114 0030 F0E0      		ldi r31,lo8(0)
 115 0032 DF01      		movw r26,r30
 116 0034 A050      		subi r26,lo8(-(buffer_data))
 117 0036 B040      		sbci r27,hi8(-(buffer_data))
 118 0038 8C91      		ld r24,X
 119 003a 80FF      		sbrs r24,0
 120 003c 00C0      		rjmp .L5
 121 003e 43E0      		ldi r20,lo8(3)
 122 0040 00C0      		rjmp .L3
 123               	.L5:
  63:audio.c       ****     else l.symbol = 1; /* DIT */
 125               	.LM6:
 126 0042 41E0      		ldi r20,lo8(1)
 127               	.L3:
  64:audio.c       **** 
  65:audio.c       ****     /* shift bitmask */
  66:audio.c       ****     buffer_data[bitmask_id] >>= 1;
 129               	.LM7:
 130 0044 E050      		subi r30,lo8(-(buffer_data))
 131 0046 F040      		sbci r31,hi8(-(buffer_data))
 132 0048 8081      		ld r24,Z
 133 004a 8695      		lsr r24
 134 004c 8083      		st Z,r24
  67:audio.c       **** 
  68:audio.c       ****     if ((buffer_data[buffer.first] & 0xf) == 0) {
 136               	.LM8:
 137 004e E091 0000 		lds r30,buffer
 138 0052 EF70      		andi r30,lo8(15)
 139 0054 F0E0      		ldi r31,lo8(0)
 140 0056 E050      		subi r30,lo8(-(buffer_data))
 141 0058 F040      		sbci r31,hi8(-(buffer_data))
 142 005a 2081      		ld r18,Z
 143 005c 30E0      		ldi r19,lo8(0)
 144 005e 2F70      		andi r18,lo8(15)
 145 0060 3070      		andi r19,hi8(15)
 146 0062 2115      		cp r18,__zero_reg__
 147 0064 3105      		cpc r19,__zero_reg__
 148 0066 01F4      		brne .L6
  69:audio.c       ****         /* last didah, send defined space */
  70:audio.c       ****         l.space = buffer_data[buffer.first] >> 4;
 150               	.LM9:
 151 0068 E091 0000 		lds r30,buffer
 152 006c EF70      		andi r30,lo8(15)
 153 006e F0E0      		ldi r31,lo8(0)
 154 0070 E050      		subi r30,lo8(-(buffer_data))
 155 0072 F040      		sbci r31,hi8(-(buffer_data))
 156 0074 2081      		ld r18,Z
 157 0076 2295      		swap r18
 158 0078 2F70      		andi r18,lo8(15)
  71:audio.c       **** 
  72:audio.c       ****         /* shift buffer pointer to the next char */
  73:audio.c       ****         buffer.first = (buffer.first + 2) % AUDIO_BUFFER_SIZE;
 160               	.LM10:
 161 007a 9091 0000 		lds r25,buffer
 162 007e 9E5F      		subi r25,lo8(-(2))
 163 0080 9F70      		andi r25,lo8(15)
 164 0082 8091 0000 		lds r24,buffer
 165 0086 807F      		andi r24,lo8(-16)
 166 0088 892B      		or r24,r25
 167 008a 8093 0000 		sts buffer,r24
 168 008e 00C0      		rjmp .L4
 169               	.L6:
  74:audio.c       ****     }
  75:audio.c       ****     else l.space = 1; // one space after didah
 171               	.LM11:
 172 0090 21E0      		ldi r18,lo8(1)
 173               	.L4:
  76:audio.c       **** 
  77:audio.c       ****     /* setup sampling timer to output symbol and space */
  78:audio.c       ****     uint16_t len;
  79:audio.c       ****     len = l.symbol * dit_length; /* length of symbol */
 175               	.LM12:
 176 0092 6091 0000 		lds r22,dit_length
 177 0096 7091 0000 		lds r23,dit_length+1
 178 009a 842F      		mov r24,r20
 179 009c 90E0      		ldi r25,lo8(0)
 180 009e 00D0      		rcall __mulhi3
  80:audio.c       **** 
  81:audio.c       ****     cli();
 182               	.LM13:
 183               	/* #APP */
 184               	 ;  81 "audio.c" 1
 185 00a0 F894      		cli
 186               	 ;  0 "" 2
  82:audio.c       ****     TC1H = len >> 8;
 188               	.LM14:
 189               	/* #NOAPP */
 190 00a2 95BD      		out 69-32,r25
  83:audio.c       ****     OCR1A = len & 0xff;
 192               	.LM15:
 193 00a4 8DBD      		out 77-32,r24
  84:audio.c       ****     sei();
 195               	.LM16:
 196               	/* #APP */
 197               	 ;  84 "audio.c" 1
 198 00a6 7894      		sei
 199               	 ;  0 "" 2
  85:audio.c       **** 
  86:audio.c       ****     len = (l.space + l.symbol) * dit_length; /* length of symbol + space */
 201               	.LM17:
 202               	/* #NOAPP */
 203 00a8 842F      		mov r24,r20
 204 00aa 90E0      		ldi r25,lo8(0)
 205 00ac 6091 0000 		lds r22,dit_length
 206 00b0 7091 0000 		lds r23,dit_length+1
 207 00b4 820F      		add r24,r18
 208 00b6 911D      		adc r25,__zero_reg__
 209 00b8 00D0      		rcall __mulhi3
  87:audio.c       ****     cli();
 211               	.LM18:
 212               	/* #APP */
 213               	 ;  87 "audio.c" 1
 214 00ba F894      		cli
 215               	 ;  0 "" 2
  88:audio.c       ****     TC1H = len >> 8;
 217               	.LM19:
 218               	/* #NOAPP */
 219 00bc 95BD      		out 69-32,r25
  89:audio.c       ****     OCR1C = len & 0xff;
 221               	.LM20:
 222 00be 8BBD      		out 75-32,r24
  90:audio.c       ****     sei();
 224               	.LM21:
 225               	/* #APP */
 226               	 ;  90 "audio.c" 1
 227 00c0 7894      		sei
 228               	 ;  0 "" 2
  91:audio.c       **** 
  92:audio.c       ****     /* start outputing sound */
  93:audio.c       ****     dac_unmute();
 230               	.LM22:
 231               	/* #NOAPP */
 232 00c2 00D0      		rcall dac_unmute
  94:audio.c       ****     sine_start();
 234               	.LM23:
 235 00c4 00D0      		rcall sine_start
 236               	.L1:
 237 00c6 0895      		ret
 239               	.Lscope1:
 240               		.section	.text.sample_wav,"ax",@progbits
 242               	.global	sample_wav
 244               	sample_wav:
  39:audio.c       **** {
 246               	.LM24:
 247               	.LFBB2:
 248               	/* prologue: function */
 249               	/* frame size = 0 */
 250               	/* stack size = 0 */
 251               	.L__stack_usage = 0
  40:audio.c       ****     if (buffer.first == buffer.empty) return;
 253               	.LM25:
 254 0000 9091 0000 		lds r25,buffer
 255 0004 9F70      		andi r25,lo8(15)
 256 0006 8091 0000 		lds r24,buffer
 257 000a 8295      		swap r24
 258 000c 8F70      		andi r24,lo8(15)
 259 000e 9817      		cp r25,r24
 260 0010 01F0      		breq .L7
  41:audio.c       ****     dac_begin();
 262               	.LM26:
 263 0012 00D0      		rcall dac_begin
  42:audio.c       ****     dac_output(buffer_data[buffer.first]);
 265               	.LM27:
 266 0014 E091 0000 		lds r30,buffer
 267 0018 EF70      		andi r30,lo8(15)
 268 001a F0E0      		ldi r31,lo8(0)
 269 001c E050      		subi r30,lo8(-(buffer_data))
 270 001e F040      		sbci r31,hi8(-(buffer_data))
 271 0020 8081      		ld r24,Z
 272 0022 00D0      		rcall dac_output
  43:audio.c       ****     dac_end();
 274               	.LM28:
 275 0024 00D0      		rcall dac_end
  44:audio.c       ****     buffer.first = (buffer.first + 1) % AUDIO_BUFFER_SIZE;
 277               	.LM29:
 278 0026 9091 0000 		lds r25,buffer
 279 002a 9F5F      		subi r25,lo8(-(1))
 280 002c 9F70      		andi r25,lo8(15)
 281 002e 8091 0000 		lds r24,buffer
 282 0032 807F      		andi r24,lo8(-16)
 283 0034 892B      		or r24,r25
 284 0036 8093 0000 		sts buffer,r24
 285               	.L7:
 286 003a 0895      		ret
 288               	.Lscope2:
 289               		.section	.text.__vector_3,"ax",@progbits
 291               	.global	__vector_3
 293               	__vector_3:
  19:audio.c       **** {
 295               	.LM30:
 296               	.LFBB3:
 297 0000 1F92      		push __zero_reg__
 298 0002 0F92      		push r0
 299 0004 0FB6      		in r0,__SREG__
 300 0006 0F92      		push r0
 301 0008 1124      		clr __zero_reg__
 302 000a 2F93      		push r18
 303 000c 3F93      		push r19
 304 000e 4F93      		push r20
 305 0010 5F93      		push r21
 306 0012 6F93      		push r22
 307 0014 7F93      		push r23
 308 0016 8F93      		push r24
 309 0018 9F93      		push r25
 310 001a AF93      		push r26
 311 001c BF93      		push r27
 312 001e EF93      		push r30
 313 0020 FF93      		push r31
 314               	/* prologue: Signal */
 315               	/* frame size = 0 */
 316               	/* stack size = 15 */
 317               	.L__stack_usage = 15
 318               	.LBB4:
 319               	.LBB5:
  95:audio.c       **** }
  96:audio.c       **** 
  97:audio.c       **** void inline output_space(void)
  98:audio.c       **** {
  99:audio.c       ****     /* stop sound, output morse space */
 100:audio.c       ****     dac_mute();
 321               	.LM31:
 322 0022 00D0      		rcall dac_mute
 101:audio.c       ****     sine_stop();
 324               	.LM32:
 325 0024 00D0      		rcall sine_stop
 326               	/* epilogue start */
 327               	.LBE5:
 328               	.LBE4:
  21:audio.c       **** }
 330               	.LM33:
 331 0026 FF91      		pop r31
 332 0028 EF91      		pop r30
 333 002a BF91      		pop r27
 334 002c AF91      		pop r26
 335 002e 9F91      		pop r25
 336 0030 8F91      		pop r24
 337 0032 7F91      		pop r23
 338 0034 6F91      		pop r22
 339 0036 5F91      		pop r21
 340 0038 4F91      		pop r20
 341 003a 3F91      		pop r19
 342 003c 2F91      		pop r18
 343 003e 0F90      		pop r0
 344 0040 0FBE      		out __SREG__,r0
 345 0042 0F90      		pop r0
 346 0044 1F90      		pop __zero_reg__
 347 0046 1895      		reti
 349               	.Lscope3:
 350               		.section	.text.__vector_5,"ax",@progbits
 352               	.global	__vector_5
 354               	__vector_5:
  25:audio.c       **** {
 356               	.LM34:
 357               	.LFBB4:
 358 0000 1F92      		push __zero_reg__
 359 0002 0F92      		push r0
 360 0004 0FB6      		in r0,__SREG__
 361 0006 0F92      		push r0
 362 0008 1124      		clr __zero_reg__
 363 000a 2F93      		push r18
 364 000c 3F93      		push r19
 365 000e 4F93      		push r20
 366 0010 5F93      		push r21
 367 0012 6F93      		push r22
 368 0014 7F93      		push r23
 369 0016 8F93      		push r24
 370 0018 9F93      		push r25
 371 001a AF93      		push r26
 372 001c BF93      		push r27
 373 001e EF93      		push r30
 374 0020 FF93      		push r31
 375               	/* prologue: Signal */
 376               	/* frame size = 0 */
 377               	/* stack size = 15 */
 378               	.L__stack_usage = 15
  26:audio.c       ****     next_sample();
 380               	.LM35:
 381 0022 E091 0000 		lds r30,next_sample
 382 0026 F091 0000 		lds r31,next_sample+1
 383 002a 0995      		icall
 384               	/* epilogue start */
  27:audio.c       **** }
 386               	.LM36:
 387 002c FF91      		pop r31
 388 002e EF91      		pop r30
 389 0030 BF91      		pop r27
 390 0032 AF91      		pop r26
 391 0034 9F91      		pop r25
 392 0036 8F91      		pop r24
 393 0038 7F91      		pop r23
 394 003a 6F91      		pop r22
 395 003c 5F91      		pop r21
 396 003e 4F91      		pop r20
 397 0040 3F91      		pop r19
 398 0042 2F91      		pop r18
 399 0044 0F90      		pop r0
 400 0046 0FBE      		out __SREG__,r0
 401 0048 0F90      		pop r0
 402 004a 1F90      		pop __zero_reg__
 403 004c 1895      		reti
 405               	.Lscope4:
 406               		.section	.text.audio_start,"ax",@progbits
 408               	.global	audio_start
 410               	audio_start:
 102:audio.c       **** }
 103:audio.c       **** 
 104:audio.c       **** /* Initialize sampling timer for audio */
 105:audio.c       **** void audio_wav_init(uint16_t samplerate)
 106:audio.c       **** {
 107:audio.c       ****     audio_buffer_clear();
 108:audio.c       ****     next_sample = &sample_wav;
 109:audio.c       **** 
 110:audio.c       ****     /*
 111:audio.c       ****        sampling timer
 112:audio.c       ****        timer1 in 10bit mode
 113:audio.c       **** 
 114:audio.c       ****        normal counter mode
 115:audio.c       ****        pins disconnected
 116:audio.c       ****     */
 117:audio.c       ****     TCCR1A = 0;
 118:audio.c       ****     TCCR1C = 0;
 119:audio.c       ****     TCCR1D = 0;
 120:audio.c       **** 
 121:audio.c       ****     PLLCSR = 0; /* disable PLL */
 122:audio.c       **** 
 123:audio.c       ****     /*
 124:audio.c       ****       compute settings for sample timer
 125:audio.c       ****       
 126:audio.c       ****       first, we need number of cpu cycles per sample
 127:audio.c       ****       then we need to set prescaler to reduce the number under 1024 (10bits)
 128:audio.c       ****     */
 129:audio.c       ****     uint16_t cyclespersample = F_CPU / samplerate;
 130:audio.c       ****     sample_clock = 1; /* clock select */
 131:audio.c       **** 
 132:audio.c       ****     while (cyclespersample > 1023) {
 133:audio.c       ****         cyclespersample >>= 1;
 134:audio.c       ****         sample_clock++; //increase prescaler divider (+1 multiplies prescaler by 2)
 135:audio.c       ****     }
 136:audio.c       **** 
 137:audio.c       ****     cli();
 138:audio.c       ****     TC1H = cyclespersample >> 8;
 139:audio.c       ****     OCR1C = cyclespersample & 0xff; /* cycles per one sample */
 140:audio.c       ****     sei();
 141:audio.c       **** 
 142:audio.c       ****     /* enable only overflow interrupt */
 143:audio.c       ****     TIMSK &= ~_BV(OCIE1A);
 144:audio.c       ****     TIMSK |= _BV(TOIE1);
 145:audio.c       **** 
 146:audio.c       **** 
 147:audio.c       ****     /*
 148:audio.c       ****       sine output is disabled
 149:audio.c       ****     */
 150:audio.c       ****     sine_deinit();
 151:audio.c       **** }
 152:audio.c       **** 
 153:audio.c       **** /* Initialize sampling/wavetable timer for morse output
 154:audio.c       **** 
 155:audio.c       ****   Morse speed definitions
 156:audio.c       **** 
 157:audio.c       ****   PARIS = 50 dot time segments
 158:audio.c       ****   12wpm = 600 dots per minute = 10 dots per second
 159:audio.c       ****   20wpm = 1000 dots per minute = 16.66 dots per second
 160:audio.c       **** */
 161:audio.c       **** 
 162:audio.c       **** void audio_morse_init(uint16_t pitch, uint8_t wpm)
 163:audio.c       **** {
 164:audio.c       ****     audio_buffer_clear();
 165:audio.c       ****     next_sample = &sample_morse;
 166:audio.c       **** 
 167:audio.c       ****     /*
 168:audio.c       ****        sampling timer
 169:audio.c       ****        timer1 in 10bit mode
 170:audio.c       **** 
 171:audio.c       ****        normal counter mode
 172:audio.c       ****        pins disconnected
 173:audio.c       ****     */
 174:audio.c       ****     TCCR1A = 0;
 175:audio.c       ****     TCCR1C = 0;
 176:audio.c       ****     TCCR1D = 0;
 177:audio.c       **** 
 178:audio.c       ****     PLLCSR = 0; /* disable PLL */
 179:audio.c       **** 
 180:audio.c       ****     /* we need to set the timer so have ten possible lengths, where each is
 181:audio.c       ****        as long as needed by the specified WPM.
 182:audio.c       **** 
 183:audio.c       ****        1 WPM = 50 dits per minute
 184:audio.c       ****        So compute number of cycles per dit (has to be 3 or more)
 185:audio.c       ****        
 186:audio.c       ****        max speed will be 60 wpm = 1 dit per  20ms = 160000 cycles
 187:audio.c       ****        min speed will be  5 wpm = 1 dit per 240ms = 1920000 cycles
 188:audio.c       **** 
 189:audio.c       ****        with prescaler 16384 it is:
 190:audio.c       ****           60 wpm = 10   cycles per 1 dit
 191:audio.c       ****           30 wpm = 20     -"-
 192:audio.c       ****           20 wpm = 29     -"-
 193:audio.c       ****           10 wpm = 59     -"-
 194:audio.c       ****            6 wpm = 98     -"-
 195:audio.c       ****            3 wpm = 195    -"-
 196:audio.c       ****            1 wpm = 586    -"-
 197:audio.c       **** 
 198:audio.c       ****        timer has to be able to count to ten dits (dash + long pause)
 199:audio.c       ****        as it has 10bit precision, the maximum dit can be only 102 cycles long
 200:audio.c       **** 
 201:audio.c       ****        minimum supported speed is then 6 wpm
 202:audio.c       ****     */
 203:audio.c       ****     sample_clock = 0b1111; /* clock select (prescaler 16384) */
 204:audio.c       ****     dit_length = 586 / wpm; /* number of timer cycles for one dit at given speed */ 
 205:audio.c       **** 
 206:audio.c       ****     cli();
 207:audio.c       ****     TC1H = 0;
 208:audio.c       ****     OCR1A = 0; /* symbol length */
 209:audio.c       **** 
 210:audio.c       ****     TC1H = 0;
 211:audio.c       ****     OCR1C = 0; /* symbol + space */
 212:audio.c       **** 
 213:audio.c       ****     TC1H = 0;
 214:audio.c       ****     TCNT1 = 0; /* actual counter value */ 
 215:audio.c       ****     sei();
 216:audio.c       **** 
 217:audio.c       ****     /* enable compareA and overflow interrupts */
 218:audio.c       ****     TIMSK |= _BV(OCIE1A) | _BV(TOIE1);
 219:audio.c       **** 
 220:audio.c       ****     /* initialize sinewave generator */
 221:audio.c       ****     sine_init(pitch);
 222:audio.c       **** }
 223:audio.c       **** 
 224:audio.c       **** /* unmute, load first sample and start needed timers */
 225:audio.c       **** void audio_start()
 226:audio.c       **** {
 412               	.LM37:
 413               	.LFBB5:
 414               	/* prologue: function */
 415               	/* frame size = 0 */
 416               	/* stack size = 0 */
 417               	.L__stack_usage = 0
 227:audio.c       ****     dac_unmute();
 419               	.LM38:
 420 0000 00D0      		rcall dac_unmute
 228:audio.c       ****     next_sample();
 422               	.LM39:
 423 0002 E091 0000 		lds r30,next_sample
 424 0006 F091 0000 		lds r31,next_sample+1
 425 000a 0995      		icall
 229:audio.c       **** 
 230:audio.c       ****     TCCR1B = sample_clock;
 427               	.LM40:
 428 000c 8091 0000 		lds r24,sample_clock
 429 0010 8FBD      		out 79-32,r24
 430               	/* epilogue start */
 231:audio.c       **** }
 432               	.LM41:
 433 0012 0895      		ret
 435               	.Lscope5:
 436               		.section	.text.audio_stop,"ax",@progbits
 438               	.global	audio_stop
 440               	audio_stop:
 232:audio.c       **** 
 233:audio.c       **** /* Stop both timers and reset AD to middle position + mute */
 234:audio.c       **** void audio_stop()
 235:audio.c       **** {
 442               	.LM42:
 443               	.LFBB6:
 444               	/* prologue: function */
 445               	/* frame size = 0 */
 446               	/* stack size = 0 */
 447               	.L__stack_usage = 0
 236:audio.c       ****     TCCR1B = 0;
 449               	.LM43:
 450 0000 1FBC      		out 79-32,__zero_reg__
 237:audio.c       ****     TCCR0B = 0;
 452               	.LM44:
 453 0002 13BE      		out 83-32,__zero_reg__
 238:audio.c       **** 
 239:audio.c       ****     dac_mute();
 455               	.LM45:
 456 0004 00D0      		rcall dac_mute
 240:audio.c       ****     sine_stop();
 458               	.LM46:
 459 0006 00D0      		rcall sine_stop
 460               	/* epilogue start */
 241:audio.c       **** }
 462               	.LM47:
 463 0008 0895      		ret
 465               	.Lscope6:
 466               		.section	.text.audio_buffer_full,"ax",@progbits
 469               	.global	audio_buffer_full
 471               	audio_buffer_full:
 242:audio.c       **** 
 243:audio.c       **** /* Is the buffer full? */
 244:audio.c       **** uint8_t audio_buffer_full(uint8_t needed)
 245:audio.c       **** {
 473               	.LM48:
 474               	.LFBB7:
 475               	/* prologue: function */
 476               	/* frame size = 0 */
 477               	/* stack size = 0 */
 478               	.L__stack_usage = 0
 246:audio.c       ****     return ((buffer.empty + needed) % AUDIO_BUFFER_SIZE) == buffer.first;
 480               	.LM49:
 481 0000 2091 0000 		lds r18,buffer
 482 0004 2295      		swap r18
 483 0006 2F70      		andi r18,lo8(15)
 484 0008 4091 0000 		lds r20,buffer
 485 000c 4F70      		andi r20,lo8(15)
 486 000e 30E0      		ldi r19,lo8(0)
 487 0010 280F      		add r18,r24
 488 0012 311D      		adc r19,__zero_reg__
 489 0014 2F70      		andi r18,lo8(15)
 490 0016 3070      		andi r19,hi8(15)
 491 0018 50E0      		ldi r21,lo8(0)
 492 001a 81E0      		ldi r24,lo8(1)
 493 001c 2417      		cp r18,r20
 494 001e 3507      		cpc r19,r21
 495 0020 01F0      		breq .L14
 496 0022 80E0      		ldi r24,lo8(0)
 497               	.L14:
 247:audio.c       **** }
 499               	.LM50:
 500 0024 0895      		ret
 502               	.Lscope7:
 503               		.section	.text.audio_buffer_empty,"ax",@progbits
 505               	.global	audio_buffer_empty
 507               	audio_buffer_empty:
 248:audio.c       **** 
 249:audio.c       **** uint8_t audio_buffer_empty(void)
 250:audio.c       **** {
 509               	.LM51:
 510               	.LFBB8:
 511               	/* prologue: function */
 512               	/* frame size = 0 */
 513               	/* stack size = 0 */
 514               	.L__stack_usage = 0
 251:audio.c       ****     return buffer.first == buffer.empty;
 516               	.LM52:
 517 0000 2091 0000 		lds r18,buffer
 518 0004 2F70      		andi r18,lo8(15)
 519 0006 9091 0000 		lds r25,buffer
 520 000a 9295      		swap r25
 521 000c 9F70      		andi r25,lo8(15)
 522 000e 81E0      		ldi r24,lo8(1)
 523 0010 2913      		cpse r18,r25
 524 0012 80E0      		ldi r24,lo8(0)
 525               	.L16:
 252:audio.c       **** }
 527               	.LM53:
 528 0014 0895      		ret
 530               	.Lscope8:
 531               		.section	.text.audio_buffer_clear,"ax",@progbits
 533               	.global	audio_buffer_clear
 535               	audio_buffer_clear:
 253:audio.c       **** 
 254:audio.c       **** /* Empty the buffer */
 255:audio.c       **** void audio_buffer_clear()
 256:audio.c       **** {
 537               	.LM54:
 538               	.LFBB9:
 539               	/* prologue: function */
 540               	/* frame size = 0 */
 541               	/* stack size = 0 */
 542               	.L__stack_usage = 0
 257:audio.c       ****     buffer.first = 0;
 544               	.LM55:
 545 0000 8091 0000 		lds r24,buffer
 546 0004 807F      		andi r24,lo8(-16)
 547 0006 8093 0000 		sts buffer,r24
 258:audio.c       ****     buffer.empty = 0;
 549               	.LM56:
 550 000a 8091 0000 		lds r24,buffer
 551 000e 8F70      		andi r24,lo8(15)
 552 0010 8093 0000 		sts buffer,r24
 553               	/* epilogue start */
 259:audio.c       **** }
 555               	.LM57:
 556 0014 0895      		ret
 558               	.Lscope9:
 559               		.section	.text.audio_morse_init,"ax",@progbits
 563               	.global	audio_morse_init
 565               	audio_morse_init:
 163:audio.c       **** {
 567               	.LM58:
 568               	.LFBB10:
 569 0000 0F93      		push r16
 570 0002 1F93      		push r17
 571 0004 DF93      		push r29
 572 0006 CF93      		push r28
 573 0008 0F92      		push __tmp_reg__
 574 000a CDB7      		in r28,__SP_L__
 575 000c DEB7      		in r29,__SP_H__
 576               	/* prologue: function */
 577               	/* frame size = 1 */
 578               	/* stack size = 5 */
 579               	.L__stack_usage = 5
 580 000e 8C01      		movw r16,r24
 164:audio.c       ****     audio_buffer_clear();
 582               	.LM59:
 583 0010 6983      		std Y+1,r22
 584 0012 00D0      		rcall audio_buffer_clear
 165:audio.c       ****     next_sample = &sample_morse;
 586               	.LM60:
 587 0014 80E0      		ldi r24,lo8(gs(sample_morse))
 588 0016 90E0      		ldi r25,hi8(gs(sample_morse))
 589 0018 9093 0000 		sts next_sample+1,r25
 590 001c 8093 0000 		sts next_sample,r24
 174:audio.c       ****     TCCR1A = 0;
 592               	.LM61:
 593 0020 10BE      		out 80-32,__zero_reg__
 175:audio.c       ****     TCCR1C = 0;
 595               	.LM62:
 596 0022 17BC      		out 71-32,__zero_reg__
 176:audio.c       ****     TCCR1D = 0;
 598               	.LM63:
 599 0024 16BC      		out 70-32,__zero_reg__
 178:audio.c       ****     PLLCSR = 0; /* disable PLL */
 601               	.LM64:
 602 0026 19BC      		out 73-32,__zero_reg__
 203:audio.c       ****     sample_clock = 0b1111; /* clock select (prescaler 16384) */
 604               	.LM65:
 605 0028 8FE0      		ldi r24,lo8(15)
 606 002a 8093 0000 		sts sample_clock,r24
 204:audio.c       ****     dit_length = 586 / wpm; /* number of timer cycles for one dit at given speed */ 
 608               	.LM66:
 609 002e 6981      		ldd r22,Y+1
 610 0030 8AE4      		ldi r24,lo8(586)
 611 0032 92E0      		ldi r25,hi8(586)
 612 0034 70E0      		ldi r23,lo8(0)
 613 0036 00D0      		rcall __divmodhi4
 614 0038 7093 0000 		sts dit_length+1,r23
 615 003c 6093 0000 		sts dit_length,r22
 206:audio.c       ****     cli();
 617               	.LM67:
 618               	/* #APP */
 619               	 ;  206 "audio.c" 1
 620 0040 F894      		cli
 621               	 ;  0 "" 2
 207:audio.c       ****     TC1H = 0;
 623               	.LM68:
 624               	/* #NOAPP */
 625 0042 15BC      		out 69-32,__zero_reg__
 208:audio.c       ****     OCR1A = 0; /* symbol length */
 627               	.LM69:
 628 0044 1DBC      		out 77-32,__zero_reg__
 210:audio.c       ****     TC1H = 0;
 630               	.LM70:
 631 0046 15BC      		out 69-32,__zero_reg__
 211:audio.c       ****     OCR1C = 0; /* symbol + space */
 633               	.LM71:
 634 0048 1BBC      		out 75-32,__zero_reg__
 213:audio.c       ****     TC1H = 0;
 636               	.LM72:
 637 004a 15BC      		out 69-32,__zero_reg__
 214:audio.c       ****     TCNT1 = 0; /* actual counter value */ 
 639               	.LM73:
 640 004c 1EBC      		out 78-32,__zero_reg__
 215:audio.c       ****     sei();
 642               	.LM74:
 643               	/* #APP */
 644               	 ;  215 "audio.c" 1
 645 004e 7894      		sei
 646               	 ;  0 "" 2
 218:audio.c       ****     TIMSK |= _BV(OCIE1A) | _BV(TOIE1);
 648               	.LM75:
 649               	/* #NOAPP */
 650 0050 89B7      		in r24,89-32
 651 0052 8464      		ori r24,lo8(68)
 652 0054 89BF      		out 89-32,r24
 221:audio.c       ****     sine_init(pitch);
 654               	.LM76:
 655 0056 C801      		movw r24,r16
 656 0058 00D0      		rcall sine_init
 657               	/* epilogue start */
 222:audio.c       **** }
 659               	.LM77:
 660 005a 0F90      		pop __tmp_reg__
 661 005c CF91      		pop r28
 662 005e DF91      		pop r29
 663 0060 1F91      		pop r17
 664 0062 0F91      		pop r16
 665 0064 0895      		ret
 667               	.Lscope10:
 668               		.section	.text.audio_wav_init,"ax",@progbits
 671               	.global	audio_wav_init
 673               	audio_wav_init:
 106:audio.c       **** {
 675               	.LM78:
 676               	.LFBB11:
 677 0000 CF93      		push r28
 678 0002 DF93      		push r29
 679               	/* prologue: function */
 680               	/* frame size = 0 */
 681               	/* stack size = 2 */
 682               	.L__stack_usage = 2
 683 0004 EC01      		movw r28,r24
 107:audio.c       ****     audio_buffer_clear();
 685               	.LM79:
 686 0006 00D0      		rcall audio_buffer_clear
 108:audio.c       ****     next_sample = &sample_wav;
 688               	.LM80:
 689 0008 80E0      		ldi r24,lo8(gs(sample_wav))
 690 000a 90E0      		ldi r25,hi8(gs(sample_wav))
 691 000c 9093 0000 		sts next_sample+1,r25
 692 0010 8093 0000 		sts next_sample,r24
 117:audio.c       ****     TCCR1A = 0;
 694               	.LM81:
 695 0014 10BE      		out 80-32,__zero_reg__
 118:audio.c       ****     TCCR1C = 0;
 697               	.LM82:
 698 0016 17BC      		out 71-32,__zero_reg__
 119:audio.c       ****     TCCR1D = 0;
 700               	.LM83:
 701 0018 16BC      		out 70-32,__zero_reg__
 121:audio.c       ****     PLLCSR = 0; /* disable PLL */
 703               	.LM84:
 704 001a 19BC      		out 73-32,__zero_reg__
 129:audio.c       ****     uint16_t cyclespersample = F_CPU / samplerate;
 706               	.LM85:
 707 001c 9E01      		movw r18,r28
 708 001e 40E0      		ldi r20,lo8(0)
 709 0020 50E0      		ldi r21,hi8(0)
 710 0022 60E0      		ldi r22,lo8(8000000)
 711 0024 72E1      		ldi r23,hi8(8000000)
 712 0026 8AE7      		ldi r24,hlo8(8000000)
 713 0028 90E0      		ldi r25,hhi8(8000000)
 714 002a 00D0      		rcall __divmodsi4
 132:audio.c       ****     while (cyclespersample > 1023) {
 716               	.LM86:
 717 002c 81E0      		ldi r24,lo8(1)
 718 002e 00C0      		rjmp .L20
 719               	.L21:
 133:audio.c       ****         cyclespersample >>= 1;
 721               	.LM87:
 722 0030 3695      		lsr r19
 723 0032 2795      		ror r18
 724 0034 892F      		mov r24,r25
 725               	.L20:
 133:audio.c       ****         cyclespersample >>= 1;
 727               	.LM88:
 728 0036 982F      		mov r25,r24
 729 0038 9F5F      		subi r25,lo8(-(1))
 132:audio.c       ****     while (cyclespersample > 1023) {
 731               	.LM89:
 732 003a 44E0      		ldi r20,hi8(1024)
 733 003c 2030      		cpi r18,lo8(1024)
 734 003e 3407      		cpc r19,r20
 735 0040 00F4      		brsh .L21
 132:audio.c       ****     while (cyclespersample > 1023) {
 737               	.LM90:
 738 0042 8093 0000 		sts sample_clock,r24
 137:audio.c       ****     cli();
 740               	.LM91:
 741               	/* #APP */
 742               	 ;  137 "audio.c" 1
 743 0046 F894      		cli
 744               	 ;  0 "" 2
 138:audio.c       ****     TC1H = cyclespersample >> 8;
 746               	.LM92:
 747               	/* #NOAPP */
 748 0048 35BD      		out 69-32,r19
 139:audio.c       ****     OCR1C = cyclespersample & 0xff; /* cycles per one sample */
 750               	.LM93:
 751 004a 2BBD      		out 75-32,r18
 140:audio.c       ****     sei();
 753               	.LM94:
 754               	/* #APP */
 755               	 ;  140 "audio.c" 1
 756 004c 7894      		sei
 757               	 ;  0 "" 2
 143:audio.c       ****     TIMSK &= ~_BV(OCIE1A);
 759               	.LM95:
 760               	/* #NOAPP */
 761 004e 89B7      		in r24,89-32
 762 0050 8F7B      		andi r24,lo8(-65)
 763 0052 89BF      		out 89-32,r24
 144:audio.c       ****     TIMSK |= _BV(TOIE1);
 765               	.LM96:
 766 0054 89B7      		in r24,89-32
 767 0056 8460      		ori r24,lo8(4)
 768 0058 89BF      		out 89-32,r24
 150:audio.c       ****     sine_deinit();
 770               	.LM97:
 771 005a 00D0      		rcall sine_deinit
 772               	/* epilogue start */
 151:audio.c       **** }
 774               	.LM98:
 775 005c DF91      		pop r29
 776 005e CF91      		pop r28
 777 0060 0895      		ret
 782               	.Lscope11:
 783               		.section	.text.audio_wav_data,"ax",@progbits
 786               	.global	audio_wav_data
 788               	audio_wav_data:
 260:audio.c       **** 
 261:audio.c       **** /* Feed the buffer with wav data */
 262:audio.c       **** uint8_t audio_wav_data(uint8_t sample)
 263:audio.c       **** {
 790               	.LM99:
 791               	.LFBB12:
 792 0000 CF93      		push r28
 793               	/* prologue: function */
 794               	/* frame size = 0 */
 795               	/* stack size = 1 */
 796               	.L__stack_usage = 1
 797 0002 C82F      		mov r28,r24
 264:audio.c       ****     if (audio_buffer_full(1)) return 0;
 799               	.LM100:
 800 0004 81E0      		ldi r24,lo8(1)
 801 0006 00D0      		rcall audio_buffer_full
 802 0008 8823      		tst r24
 803 000a 01F4      		brne .L24
 265:audio.c       **** 
 266:audio.c       ****     buffer_data[buffer.empty] = sample;
 805               	.LM101:
 806 000c E091 0000 		lds r30,buffer
 807 0010 E295      		swap r30
 808 0012 EF70      		andi r30,lo8(15)
 809 0014 F0E0      		ldi r31,lo8(0)
 810 0016 E050      		subi r30,lo8(-(buffer_data))
 811 0018 F040      		sbci r31,hi8(-(buffer_data))
 812 001a C083      		st Z,r28
 267:audio.c       ****     buffer.empty = (buffer.empty + 1) % AUDIO_BUFFER_SIZE;
 814               	.LM102:
 815 001c 9091 0000 		lds r25,buffer
 816 0020 907F      		andi r25,lo8(-16)
 817 0022 905F      		subi r25,lo8(-(16))
 818 0024 8091 0000 		lds r24,buffer
 819 0028 8F70      		andi r24,lo8(15)
 820 002a 892B      		or r24,r25
 821 002c 8093 0000 		sts buffer,r24
 268:audio.c       **** 
 269:audio.c       ****     return 1;
 823               	.LM103:
 824 0030 81E0      		ldi r24,lo8(1)
 825 0032 00C0      		rjmp .L23
 826               	.L24:
 264:audio.c       ****     if (audio_buffer_full(1)) return 0;
 828               	.LM104:
 829 0034 80E0      		ldi r24,lo8(0)
 830               	.L23:
 831               	/* epilogue start */
 270:audio.c       **** }
 833               	.LM105:
 834 0036 CF91      		pop r28
 835 0038 0895      		ret
 837               	.Lscope12:
 838               		.section	.text.audio_morse_data,"ax",@progbits
 843               	.global	audio_morse_data
 845               	audio_morse_data:
 271:audio.c       **** 
 272:audio.c       **** /* Add morse symbol and following space to buffer */
 273:audio.c       **** uint8_t audio_morse_data(uint8_t len, uint8_t bitmask, uint8_t space)
 274:audio.c       **** {
 847               	.LM106:
 848               	.LFBB13:
 849 0000 1F93      		push r17
 850 0002 DF93      		push r29
 851 0004 CF93      		push r28
 852 0006 00D0      		rcall .
 853 0008 CDB7      		in r28,__SP_L__
 854 000a DEB7      		in r29,__SP_H__
 855               	/* prologue: function */
 856               	/* frame size = 2 */
 857               	/* stack size = 5 */
 858               	.L__stack_usage = 5
 859 000c 182F      		mov r17,r24
 275:audio.c       ****     if (audio_buffer_full(2)) return 0;
 861               	.LM107:
 862 000e 82E0      		ldi r24,lo8(2)
 863 0010 4A83      		std Y+2,r20
 864 0012 6983      		std Y+1,r22
 865 0014 00D0      		rcall audio_buffer_full
 866 0016 4A81      		ldd r20,Y+2
 867 0018 6981      		ldd r22,Y+1
 868 001a 8823      		tst r24
 869 001c 01F4      		brne .L27
 276:audio.c       **** 
 277:audio.c       ****     buffer_data[buffer.empty] = (space << 4) | (len & 0xf);
 871               	.LM108:
 872 001e E091 0000 		lds r30,buffer
 873 0022 E295      		swap r30
 874 0024 EF70      		andi r30,lo8(15)
 875 0026 F0E0      		ldi r31,lo8(0)
 876 0028 4295      		swap r20
 877 002a 407F      		andi r20,lo8(-16)
 878 002c 1F70      		andi r17,lo8(15)
 879 002e 412B      		or r20,r17
 880 0030 E050      		subi r30,lo8(-(buffer_data))
 881 0032 F040      		sbci r31,hi8(-(buffer_data))
 882 0034 4083      		st Z,r20
 278:audio.c       ****     buffer.empty = (buffer.empty + 1) % AUDIO_BUFFER_SIZE;
 884               	.LM109:
 885 0036 9091 0000 		lds r25,buffer
 886 003a 907F      		andi r25,lo8(-16)
 887 003c 905F      		subi r25,lo8(-(16))
 888 003e 8091 0000 		lds r24,buffer
 889 0042 8F70      		andi r24,lo8(15)
 890 0044 892B      		or r24,r25
 891 0046 8093 0000 		sts buffer,r24
 279:audio.c       **** 
 280:audio.c       ****     buffer_data[buffer.empty] = bitmask;
 893               	.LM110:
 894 004a E091 0000 		lds r30,buffer
 895 004e E295      		swap r30
 896 0050 EF70      		andi r30,lo8(15)
 897 0052 F0E0      		ldi r31,lo8(0)
 898 0054 E050      		subi r30,lo8(-(buffer_data))
 899 0056 F040      		sbci r31,hi8(-(buffer_data))
 900 0058 6083      		st Z,r22
 281:audio.c       ****     buffer.empty = (buffer.empty + 1) % AUDIO_BUFFER_SIZE;
 902               	.LM111:
 903 005a 9091 0000 		lds r25,buffer
 904 005e 907F      		andi r25,lo8(-16)
 905 0060 905F      		subi r25,lo8(-(16))
 906 0062 8091 0000 		lds r24,buffer
 907 0066 8F70      		andi r24,lo8(15)
 908 0068 892B      		or r24,r25
 909 006a 8093 0000 		sts buffer,r24
 282:audio.c       **** 
 283:audio.c       ****     return 2;
 911               	.LM112:
 912 006e 82E0      		ldi r24,lo8(2)
 913 0070 00C0      		rjmp .L26
 914               	.L27:
 275:audio.c       ****     if (audio_buffer_full(2)) return 0;
 916               	.LM113:
 917 0072 80E0      		ldi r24,lo8(0)
 918               	.L26:
 919               	/* epilogue start */
 284:audio.c       **** }
 921               	.LM114:
 922 0074 0F90      		pop __tmp_reg__
 923 0076 0F90      		pop __tmp_reg__
 924 0078 CF91      		pop r28
 925 007a DF91      		pop r29
 926 007c 1F91      		pop r17
 927 007e 0895      		ret
 929               	.Lscope13:
 930               		.comm next_sample,2,1
 931               		.comm sample_clock,1,1
 932               		.comm dit_length,2,1
 933               		.comm buffer_data,16,1
 934               		.comm buffer,1,1
 940               		.text
 942               	.Letext0:
 943               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 audio.c
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:2      *ABS*:0000003f __SREG__
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:3      *ABS*:0000003e __SP_H__
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:4      *ABS*:0000003d __SP_L__
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:5      *ABS*:00000034 __CCP__
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:6      *ABS*:00000000 __tmp_reg__
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:7      *ABS*:00000001 __zero_reg__
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:76     .text.sample_morse:00000000 sample_morse
                            *COM*:00000001 buffer
                            *COM*:00000010 buffer_data
                            *COM*:00000002 dit_length
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:244    .text.sample_wav:00000000 sample_wav
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:293    .text.__vector_3:00000000 __vector_3
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:354    .text.__vector_5:00000000 __vector_5
                            *COM*:00000002 next_sample
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:410    .text.audio_start:00000000 audio_start
                            *COM*:00000001 sample_clock
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:440    .text.audio_stop:00000000 audio_stop
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:471    .text.audio_buffer_full:00000000 audio_buffer_full
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:507    .text.audio_buffer_empty:00000000 audio_buffer_empty
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:535    .text.audio_buffer_clear:00000000 audio_buffer_clear
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:565    .text.audio_morse_init:00000000 audio_morse_init
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:673    .text.audio_wav_init:00000000 audio_wav_init
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:788    .text.audio_wav_data:00000000 audio_wav_data
/var/folders/4j/4jnX1ciVFyqgR-SAAt4fNE+++TI/-Tmp-//ccL5Yo2x.s:845    .text.audio_morse_data:00000000 audio_morse_data

UNDEFINED SYMBOLS
__mulhi3
dac_unmute
sine_start
dac_begin
dac_output
dac_end
dac_mute
sine_stop
__divmodhi4
sine_init
__divmodsi4
sine_deinit
__do_clear_bss
